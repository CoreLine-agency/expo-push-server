/*** AUTOGENERATED FILE: you can only modify parts of the file within <keep-*> tags ***/
// tslint:disable max-line-length no-duplicate-imports
import { Field, ID, ObjectType } from 'type-graphql';
import { Column, Entity, JoinColumn, ManyToOne, OneToMany, OneToOne, PrimaryGeneratedColumn } from 'typeorm';

import * as auth from '../../utils/auth/auth-checkers';
import { IAuthorizable } from '../../utils/auth/IAuthorizable';
import { getInputOperationType } from '../../utils/get-input-operation-type';
import { NotificationAuth } from '../auth/NotificationAuth';
import { EntityId, EntityIdScalar } from '../EntityId';
import { NotificationPriority } from '../enums/NotificationPriority';
import { NotificationSound } from '../enums/NotificationSound';
import { NotificationCreateInput } from '../inputs/NotificationCreateInput';
import { NotificationEditInput } from '../inputs/NotificationEditInput';
import { NotificationNestedInput } from '../inputs/NotificationNestedInput';
import { IRequestContext } from '../IRequestContext';
import { NotificationChannel } from './NotificationChannel';
import {  } from './update-operations/notification-update-operations';

// <keep-imports>
import { map } from 'bluebird';
import { Channel } from './Channel';
// </keep-imports>

// <keep-decorators>
// </keep-decorators>
@Entity()
@ObjectType()
export class Notification implements IAuthorizable {
  @Field((type) => EntityIdScalar)
  @PrimaryGeneratedColumn()
  public id: EntityId;

  public authorizationChecker = new NotificationAuth(this);

  @Column({nullable: true, type: 'varchar',
    // <custom-column-args>
    // </custom-column-args>
  })
  public data?: string | null;

  @Field(() => String, { nullable: true })
  @Column({nullable: true, type: 'varchar',
    // <custom-column-args>
    // </custom-column-args>
  })
  public title?: string | null;

  @Field(() => String, { nullable: true })
  @Column({nullable: true, type: 'varchar',
    // <custom-column-args>
    // </custom-column-args>
  })
  public body?: string | null;

  @Field(() => NotificationPriority)
  @Column({enum: NotificationPriority,
    // <custom-column-args>
    // </custom-column-args>
  })
  public priority: NotificationPriority;

  @Field(() => NotificationSound)
  @Column({enum: NotificationSound,
    // <custom-column-args>
    // </custom-column-args>
  })
  public sound: NotificationSound;

  @Field(() => Number, { nullable: true })
  @Column({nullable: true, type: 'integer',
    // <custom-column-args>
    // </custom-column-args>
  })
  public badge?: number | null;

  @OneToMany((type) => NotificationChannel, (notificationChannel) => notificationChannel.notification)
  @Field((returns) => [NotificationChannel])
  public notificationChannels: Promise<Array<NotificationChannel>>;

  public async update(input: NotificationCreateInput | NotificationEditInput | NotificationNestedInput, context: IRequestContext) {
    const data = input;
    if (getInputOperationType(this, input) === 'update') {
      await auth.assertCanUpdate(this, context);
    }
    Object.assign(this, data);

    context.modelsToSave.push(this);

    // <keep-update-code>
    const createInput = input as NotificationCreateInput;
    if ('channelsNames' in createInput) {
      const channels = await map(createInput.channelsNames, async (name) => {
        const existingChannel = await context.em.findOne(Channel, { where: { name } });
        if (existingChannel) {
          return existingChannel;
        }

        const newChannel = new Channel();
        newChannel.name = name;
        // await context.em.save(newChannel);

        return newChannel;
      });

      context.modelsToSave.push(...channels);

      const notificationChannels = await map(channels, async (channel) => {
        const notificationChannel = new NotificationChannel();
        notificationChannel.channel = channel;

        return notificationChannel;
      });

      this.notificationChannels = notificationChannels;

      context.modelsToSave.push(...notificationChannels);
    }
    if (createInput.data) {
      this.data = JSON.stringify(createInput.data);
    }
    // </keep-update-code>
    await auth.assertCanPersist(this, context);

    return this;
  }

  // <keep-methods>
  // </keep-methods>
}
