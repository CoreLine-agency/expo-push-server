/*** AUTOGENERATED FILE: you can only modify parts of the file within <keep-*> tags ***/
// tslint:disable max-line-length
import { asPromise } from '../../../utils/as-promise';
import { ChannelNestedInput } from '../../inputs/ChannelNestedInput';
import { TokenNestedInput } from '../../inputs/TokenNestedInput';
import { IRequestContext } from '../../IRequestContext';
import { Channel } from '../Channel';
import { Token } from '../Token';
import { TokenChannelSubscription } from '../TokenChannelSubscription';

export async function updateTokenRelation(tokenChannelSubscription: TokenChannelSubscription, token: TokenNestedInput | null | undefined, context: IRequestContext) {
  if (token === null) {
    throw new Error('TokenChannelSubscription.token cannot be null');
  } else if (token === undefined) {
    // do nothing
  } else if (token.id) {
    const tokenModel = await context.em.findOneOrFail(Token, token.id);
    tokenChannelSubscription.token = asPromise(await tokenModel.update(token, context));
  } else {
    tokenChannelSubscription.token = asPromise(await new Token().update(token, context));
  }
}

export async function updateChannelRelation(tokenChannelSubscription: TokenChannelSubscription, channel: ChannelNestedInput | null | undefined, context: IRequestContext) {
  if (channel === null) {
    throw new Error('TokenChannelSubscription.channel cannot be null');
  } else if (channel === undefined) {
    // do nothing
  } else if (channel.id) {
    const channelModel = await context.em.findOneOrFail(Channel, channel.id);
    tokenChannelSubscription.channel = asPromise(await channelModel.update(channel, context));
  } else {
    tokenChannelSubscription.channel = asPromise(await new Channel().update(channel, context));
  }
}
