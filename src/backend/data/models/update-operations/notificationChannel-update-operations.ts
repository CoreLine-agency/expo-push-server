/*** AUTOGENERATED FILE: you can only modify parts of the file within <keep-*> tags ***/
// tslint:disable max-line-length
import { asPromise } from '../../../utils/as-promise';
import { ChannelNestedInput } from '../../inputs/ChannelNestedInput';
import { NotificationNestedInput } from '../../inputs/NotificationNestedInput';
import { IRequestContext } from '../../IRequestContext';
import { Channel } from '../Channel';
import { Notification } from '../Notification';
import { NotificationChannel } from '../NotificationChannel';

export async function updateNotificationRelation(notificationChannel: NotificationChannel, notification: NotificationNestedInput | null | undefined, context: IRequestContext) {
  if (notification === null) {
    throw new Error('NotificationChannel.notification cannot be null');
  } else if (notification === undefined) {
    // do nothing
  } else if (notification.id) {
    const notificationModel = await context.em.findOneOrFail(Notification, notification.id);
    notificationChannel.notification = asPromise(await notificationModel.update(notification, context));
  } else {
    notificationChannel.notification = asPromise(await new Notification().update(notification, context));
  }
}

export async function updateChannelRelation(notificationChannel: NotificationChannel, channel: ChannelNestedInput | null | undefined, context: IRequestContext) {
  if (channel === null) {
    throw new Error('NotificationChannel.channel cannot be null');
  } else if (channel === undefined) {
    // do nothing
  } else if (channel.id) {
    const channelModel = await context.em.findOneOrFail(Channel, channel.id);
    notificationChannel.channel = asPromise(await channelModel.update(channel, context));
  } else {
    notificationChannel.channel = asPromise(await new Channel().update(channel, context));
  }
}
