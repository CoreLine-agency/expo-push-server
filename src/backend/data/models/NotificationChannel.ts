/*** AUTOGENERATED FILE: you can only modify parts of the file within <keep-*> tags ***/
// tslint:disable max-line-length no-duplicate-imports
import { Field, ID, ObjectType } from 'type-graphql';
import { Column, Entity, JoinColumn, ManyToOne, OneToMany, OneToOne, PrimaryGeneratedColumn } from 'typeorm';

import { Channel } from './Channel';
import { Notification } from './Notification';

import * as auth from '../../utils/auth/auth-checkers';
import { IAuthorizable } from '../../utils/auth/IAuthorizable';
import { getInputOperationType } from '../../utils/get-input-operation-type';
import { NotificationChannelAuth } from '../auth/NotificationChannelAuth';
import { EntityId, EntityIdScalar } from '../EntityId';
import { NotificationChannelCreateInput } from '../inputs/NotificationChannelCreateInput';
import { NotificationChannelEditInput } from '../inputs/NotificationChannelEditInput';
import { NotificationChannelNestedInput } from '../inputs/NotificationChannelNestedInput';
import { IRequestContext } from '../IRequestContext';
import { updateChannelRelation, updateNotificationRelation } from './update-operations/notificationChannel-update-operations';

// <keep-imports>
// </keep-imports>

// <keep-decorators>
// </keep-decorators>
@Entity()
@ObjectType()
export class NotificationChannel implements IAuthorizable {
  @Field((type) => EntityIdScalar)
  @PrimaryGeneratedColumn()
  public id: EntityId;

  public authorizationChecker = new NotificationChannelAuth(this);

  @ManyToOne((type) => Notification, (notification) => notification.notificationChannels , { nullable: false, onDelete: 'CASCADE' })
  @Field((returns) => Notification , { nullable: false })
  public notification: Promise<Notification>;

  @ManyToOne((type) => Channel, (channel) => channel.notificationChannels , { nullable: false, onDelete: 'CASCADE' })
  @Field((returns) => Channel , { nullable: false })
  public channel: Promise<Channel>;

  public async update(input: NotificationChannelCreateInput | NotificationChannelEditInput | NotificationChannelNestedInput, context: IRequestContext) {
    const { notification, channel, ...data } = input;
    if (getInputOperationType(this, input) === 'update') {
      await auth.assertCanUpdate(this, context);
    }
    Object.assign(this, data);

    await updateNotificationRelation(this, notification, context);
    await updateChannelRelation(this, channel, context);

    context.modelsToSave.push(this);

    // <keep-update-code>
    // </keep-update-code>
    await auth.assertCanPersist(this, context);

    return this;
  }

  // <keep-methods>
  // </keep-methods>
}
