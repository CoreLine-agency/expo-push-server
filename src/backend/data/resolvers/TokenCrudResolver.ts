/*** AUTOGENERATED FILE: you can only modify parts of the file within <keep-*> tags ***/
// tslint:disable max-line-length
import { Arg, Args, Ctx, FieldResolver, ID, Info, Mutation, Query, Resolver, Root } from 'type-graphql';

import { addEagerFlags } from '../../utils/add-eager-flags';
import * as auth from '../../utils/auth/auth-checkers';
import { getFindOptions } from '../../utils/get-find-options';
import { EntityId, EntityIdScalar } from '../EntityId';
import { TokenCreateInput } from '../inputs/TokenCreateInput';
import { TokenEditInput } from '../inputs/TokenEditInput';
import { IRequestContext } from '../IRequestContext';
import { Token } from '../models/Token';

// <keep-imports>
import Expo from 'expo-server-sdk';
import { uniq } from 'lodash';
import { asPromise } from '../../utils/as-promise';
import { Channel } from '../models/Channel';
import { TokenChannelSubscription } from '../models/TokenChannelSubscription';
// </keep-imports>

@Resolver(Token)
export class TokenCrudResolver {
  @Query((returns) => Token)
  public async token(@Arg('id', () => EntityIdScalar) id: number, @Info() info, @Ctx() ctx: IRequestContext) {
    return addEagerFlags(await ctx.em.findOneOrFail(Token, id, getFindOptions(Token, info)));
  }

  @Query((returns) => [Token])
  public async tokens(@Info() info, @Ctx() ctx: IRequestContext) {
    return addEagerFlags(await ctx.em.find(Token, getFindOptions(Token, info)));
  }

  @Mutation((returns) => Token)
  public async createToken(@Arg('input') input: TokenCreateInput, @Ctx() ctx: IRequestContext): Promise<Token> {
    const model = new Token();
    await model.update(input, ctx);

    await ctx.em.save(ctx.modelsToSave);

    // <keep-create-code>
    // </keep-create-code>

    return model;
  }

  @Mutation((returns) => Token)
  public async updateToken(@Arg('input') input: TokenEditInput, @Ctx() ctx: IRequestContext) {
    const model = await ctx.em.findOneOrFail(Token, input.id);
    await model.update(input, ctx);

    // <keep-update-code>
    // </keep-update-code>

    await ctx.em.save(ctx.modelsToSave);

    return model;
  }

  @Mutation((returns) => Boolean)
  public async deleteTokens(@Arg('ids', () => [ID]) ids: Array<EntityId>, @Ctx() ctx: IRequestContext): Promise<boolean> {
    const entities = await ctx.em.findByIds(Token, ids);
    await auth.assertCanDelete(entities, ctx);
    await ctx.em.remove(entities);

    return true;
  }

  // <keep-methods>
  @Mutation(() => Token)
  public async registerToken(
    @Arg('pushToken', () => String) pushToken: string,
    @Arg('channelsNames', () => [String]) channelsNames: Array<string>,
    @Ctx() ctx: IRequestContext,
  ): Promise<Token> {
    if (!Expo.isExpoPushToken(pushToken)) {
      throw new Error('Invalid push token');
    }

    const token = await ctx.em.findOne(Token, { where: { content: pushToken } }) || new Token();
    token.content = pushToken;
    const channels: Array<Channel> = [];
    for (const channelName of uniq(channelsNames)) {
      const channel = await ctx.em.findOne(Channel, { where: { name: channelName } }) || new Channel();
      channel.name = channelName;
      channels.push(channel);
    }

    await ctx.em.save(channels);
    await ctx.em.remove(await token.subscriptions);

    token.subscriptions = asPromise([]);
    await ctx.em.save(token);
    const subscriptions = channels.map((channel) => {
      const subscription = new TokenChannelSubscription();
      subscription.channel = asPromise(channel);
      subscription.token = asPromise(token);

      return subscription;
    });

    await ctx.em.save(subscriptions);

    return token;
  }
  // </keep-methods>
}
